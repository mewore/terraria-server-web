import cz.habarta.typescript.generator.JsonLibrary
import cz.habarta.typescript.generator.TypeScriptFileType

buildscript {
    repositories {
        mavenLocal()
    }

    dependencies {
        classpath 'cz.habarta.typescript-generator:typescript-generator-gradle-plugin:2.+'
        classpath 'cz.habarta.typescript-generator:typescript-generator-spring:2.+'
        classpath 'org.hibernate:hibernate-gradle-plugin:5.4.28.Final'
    }
}

plugins {
    id 'org.springframework.boot' version '2.4.3'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
}

apply plugin: 'cz.habarta.typescript-generator'
apply plugin: 'org.hibernate.orm'

hibernate {
    enhance {
        enableLazyInitialization= true
        enableDirtyTracking = true
        enableAssociationManagement = true
    }
}

group = 'io.github.mewore.terraria'
version = '0.0.1-SNAPSHOT'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.hibernate:hibernate-core:5.4.28.Final'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    implementation 'org.flywaydb:flyway-core'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.mockito:mockito-core:3.6.28'
    testCompileOnly('org.projectlombok:lombok')
    testAnnotationProcessor('org.projectlombok:lombok')
}

test {
    useJUnitPlatform()
}

generateTypeScript {
    classPatterns = ['io.github.mewore.tsw.controllers.**']

    optionalAnnotations = ['org.springframework.lang.Nullable']

    customTypeMappings = ['java.nio.file.Path:string', 'java.time.Instant:string']

    outputFileType = TypeScriptFileType.implementationFile
    jsonLibrary = JsonLibrary.jackson2
    outputKind = 'module'
    generateSpringApplicationClient = true
    def fileExtension = outputFileType == TypeScriptFileType.implementationFile ? ".ts" : ".d.ts"
    outputs.file(project.buildDir.toPath().resolve("typescript-generator").resolve(project.name + fileExtension))
}

bootJar.dependsOn test, generateTypeScript
