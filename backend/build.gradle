import cz.habarta.typescript.generator.JsonLibrary
import cz.habarta.typescript.generator.TypeScriptFileType

buildscript {
    repositories {
        mavenLocal()
    }

    dependencies {
        classpath 'cz.habarta.typescript-generator:typescript-generator-gradle-plugin:2.+'
        classpath 'cz.habarta.typescript-generator:typescript-generator-spring:2.+'
        classpath 'org.hibernate:hibernate-gradle-plugin:5.4.28.Final'
    }
}

plugins {
    id 'org.springframework.boot' version '2.4.3'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
    id 'jacoco'
    id 'com.github.spotbugs' version '4.7.3'
}

apply plugin: 'cz.habarta.typescript-generator'
apply plugin: 'org.hibernate.orm'

targetCompatibility = JavaVersion.VERSION_11
sourceCompatibility = JavaVersion.VERSION_11

hibernate {
    enhance {
        enableLazyInitialization = true
        enableDirtyTracking = true
        enableAssociationManagement = true
    }
}

group = 'io.github.mewore.terraria'
version = '0.0.1-SNAPSHOT'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext['log4j2.version'] = '2.16.0'
dependencies {
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
    compileOnly 'org.hibernate:hibernate-core:5.5.5.Final'
    compileOnly 'org.projectlombok:lombok:1.18.20'
    compileOnly 'org.checkerframework:checker-qual:3.16.0'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.5.3'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.5.3'
    implementation 'org.springframework.boot:spring-boot-starter-security:2.5.3'
    implementation 'org.springframework.boot:spring-boot-starter-websocket:2.5.3'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    implementation 'org.flywaydb:flyway-core:7.12.1'
    implementation 'com.impossibl.pgjdbc-ng:pgjdbc-ng:0.8.9'
    runtimeOnly 'com.google.code.findbugs:jsr305:3.0.2'
    runtimeOnly 'com.h2database:h2:1.4.200'

    testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'
    testCompileOnly 'org.projectlombok:lombok:1.18.20'
    testCompileOnly 'org.checkerframework:checker-qual:3.16.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.5.3'
    testImplementation 'org.springframework.security:spring-security-test:5.5.1'
    testImplementation 'org.mockito:mockito-core:3.11.2'
    testRuntimeOnly 'com.google.code.findbugs:jsr305:3.0.2'
}

spotbugsMain {
    reports.configure {
        xml.enabled = false
        html.enabled = true
    }
    excludeFilter.fileValue(projectDir.toPath().resolve('spotbugs-exclude.xml').toFile())
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = '0.8.6'
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.required = true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/Application.class',
                    '**/*Constants.class',
                    '**/*Entity.class',
                    '**/services/util/**/*.class',
            ])
        }))
    }
}

generateTypeScript {
    // The documentation for the Maven plugin (there may not be one for Gradle, but they're essentially the same):
    // http://www.habarta.cz/typescript-generator/maven/typescript-generator-maven-plugin/generate-mojo.html

    classPatterns = ['io.github.mewore.tsw.controllers.**']
    classesWithAnnotations = ['io.github.mewore.tsw.models.MessageModel']
    excludeClasses = ['org.springframework.core.io.Resource']

    optionalAnnotations = ['org.springframework.lang.Nullable']
    nullableAnnotations = ['org.checkerframework.checker.nullness.qual.Nullable']

    customTypeMappings = ['java.nio.file.Path:string', 'java.time.Instant:string', 'java.time.Duration:undefined']

    // Make sure the file remains the same if the definitions are the same
    sortDeclarations = true
    sortTypeDeclarations = true
    noFileComment = true

    outputFileType = TypeScriptFileType.implementationFile
    jsonLibrary = JsonLibrary.jackson2
    outputKind = 'module'
    generateSpringApplicationClient = true
    def fileExtension = outputFileType == TypeScriptFileType.implementationFile ? '.ts' : '.d.ts'
    outputs.file(project.buildDir.toPath().resolve('typescript-generator').resolve(project.name + fileExtension))
}

bootJar.dependsOn spotbugsMain, test, generateTypeScript
